// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_wan_android_getx/test/test_wan_project_tree_model.dart';
import 'package:flutter_wan_android_getx/generated/json/test_wan_project_tree_model_helper.dart';
import 'package:flutter_wan_android_getx/page/model/language.dart';
import 'package:flutter_wan_android_getx/generated/json/language_helper.dart';
import 'package:flutter_wan_android_getx/model/article_data_model.dart';
import 'package:flutter_wan_android_getx/generated/json/article_data_model_helper.dart';
import 'package:flutter_wan_android_getx/test/test_mxnzp_model.dart';
import 'package:flutter_wan_android_getx/generated/json/test_mxnzp_model_helper.dart';
import 'package:flutter_wan_android_getx/model/hot_search_model.dart';
import 'package:flutter_wan_android_getx/generated/json/hot_search_model_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case TestWanProjectTreeModel:
				return testWanProjectTreeModelFromJson(data as TestWanProjectTreeModel, json) as T;
			case Language:
				return languageFromJson(data as Language, json) as T;
			case ArticleDataModel:
				return articleDataModelFromJson(data as ArticleDataModel, json) as T;
			case ArticleDataModelDatas:
				return articleDataModelDatasFromJson(data as ArticleDataModelDatas, json) as T;
			case ArticleDataModelDatasTags:
				return articleDataModelDatasTagsFromJson(data as ArticleDataModelDatasTags, json) as T;
			case TestMxnzpModel:
				return testMxnzpModelFromJson(data as TestMxnzpModel, json) as T;
			case HotSearchModel:
				return hotSearchModelFromJson(data as HotSearchModel, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case TestWanProjectTreeModel:
				return testWanProjectTreeModelToJson(data as TestWanProjectTreeModel);
			case Language:
				return languageToJson(data as Language);
			case ArticleDataModel:
				return articleDataModelToJson(data as ArticleDataModel);
			case ArticleDataModelDatas:
				return articleDataModelDatasToJson(data as ArticleDataModelDatas);
			case ArticleDataModelDatasTags:
				return articleDataModelDatasTagsToJson(data as ArticleDataModelDatasTags);
			case TestMxnzpModel:
				return testMxnzpModelToJson(data as TestMxnzpModel);
			case HotSearchModel:
				return hotSearchModelToJson(data as HotSearchModel);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (TestWanProjectTreeModel).toString()){
			return TestWanProjectTreeModel().fromJson(json);
		}
		if(type == (Language).toString()){
			return Language().fromJson(json);
		}
		if(type == (ArticleDataModel).toString()){
			return ArticleDataModel().fromJson(json);
		}
		if(type == (ArticleDataModelDatas).toString()){
			return ArticleDataModelDatas().fromJson(json);
		}
		if(type == (ArticleDataModelDatasTags).toString()){
			return ArticleDataModelDatasTags().fromJson(json);
		}
		if(type == (TestMxnzpModel).toString()){
			return TestMxnzpModel().fromJson(json);
		}
		if(type == (HotSearchModel).toString()){
			return HotSearchModel().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<TestWanProjectTreeModel>[] is M){
			return data.map<TestWanProjectTreeModel>((e) => TestWanProjectTreeModel().fromJson(e)).toList() as M;
		}
		if(<Language>[] is M){
			return data.map<Language>((e) => Language().fromJson(e)).toList() as M;
		}
		if(<ArticleDataModel>[] is M){
			return data.map<ArticleDataModel>((e) => ArticleDataModel().fromJson(e)).toList() as M;
		}
		if(<ArticleDataModelDatas>[] is M){
			return data.map<ArticleDataModelDatas>((e) => ArticleDataModelDatas().fromJson(e)).toList() as M;
		}
		if(<ArticleDataModelDatasTags>[] is M){
			return data.map<ArticleDataModelDatasTags>((e) => ArticleDataModelDatasTags().fromJson(e)).toList() as M;
		}
		if(<TestMxnzpModel>[] is M){
			return data.map<TestMxnzpModel>((e) => TestMxnzpModel().fromJson(e)).toList() as M;
		}
		if(<HotSearchModel>[] is M){
			return data.map<HotSearchModel>((e) => HotSearchModel().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}